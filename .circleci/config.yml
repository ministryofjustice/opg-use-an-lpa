version: 2.1

workflows:
  path_to_live:
    jobs:
      # Common tasks
      - use-my-lpa/lint_terraform:
          name: lint_terraform
          filters:
            branches:
              ignore: master

      - use-my-lpa/docker_build_viewer_app:
          name: app_viewer_build
      - use-my-lpa/docker_build_viewer_web:
          name: web_viewer_build

      # Provision and test development
      - use-my-lpa/apply_shared_terraform:
          name: dev_apply_shared_terraform
          requires: [lint_terraform]
          filters:
            branches:
              ignore: master
      - use-my-lpa/apply_environment_terraform:
          name: dev_apply_environment_terraform
          requires: [dev_apply_shared_terraform, app_viewer_build, web_viewer_build]
          filters:
            branches:
              ignore: master

      - use-my-lpa/run_behave_suite:
          name: dev_run_behave_tests
          requires: [dev_apply_environment_terraform]
          filters:
            branches:
              ignore: master

      - hold-for-destruction:
          name: hold_env_for_destruction
          type: approval 
          requires: [dev_run_behave_tests]
          filters:
            branches:
              ignore: master

      - use-my-lpa/destroy_dev_environment:
          name: dev_destroy_environment
          requires: [hold_env_for_destruction]
          filters:
            branches:
              ignore: master

      # Provision and test preproduction
      - use-my-lpa/apply_shared_terraform:
          name: preprod_apply_shared_terraform
          workspace: preproduction
          filters:
            branches:
              only: master
      - use-my-lpa/apply_environment_terraform:
          name: preprod_apply_environment_terraform
          workspace: preproduction
          requires: [preprod_apply_shared_terraform, app_viewer_build, web_viewer_build]
          filters:
            branches:
              only: master

      - use-my-lpa/run_behave_suite:
          name: preprod_run_behave_tests
          workspace: preproduction
          requires: [preprod_apply_environment_terraform]
          filters:
            branches:
              only: master

      # Provision and test production
      - use-my-lpa/apply_shared_terraform:
          name: production_apply_shared_terraform
          workspace: production
          requires: [preprod_run_behave_tests]
          filters:
            branches:
              only: master
      - use-my-lpa/apply_environment_terraform:
          name: production_apply_environment_terraform
          workspace: production
          requires: [production_apply_shared_terraform, app_viewer_build, web_viewer_build]
          filters:
            branches:
              only: master

      - use-my-lpa/run_behave_suite:
          name: prod_run_behave_tests
          workspace: production
          requires: [production_apply_environment_terraform]
          filters:
            branches:
              only: master

orbs:
  use-my-lpa:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      install_webdriver:
        steps:
          - run:
              name: Install WebDriver
              command: |
                wget https://github.com/mozilla/geckodriver/releases/download/v0.23.0/geckodriver-v0.23.0-linux64.tar.gz
                sudo sh -c 'tar -x geckodriver -zf geckodriver-v0.23.0-linux64.tar.gz -O > /usr/bin/geckodriver'
                sudo chmod +x /usr/bin/geckodriver
                rm geckodriver-v0.23.0-linux64.tar.gz
      ecr_login:
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::311462405659:role/ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                eval $(aws ecr get-login --no-include-email --region=eu-west-1)

    executors:
      python:
        docker: [image: circleci/python]
      python-browsers:
        docker: [image: circleci/python:3.6-stretch-browsers]
      terraform:
        docker: [image: hashicorp/terraform]

    jobs:
      lint_terraform:
        #
        # Lint the Terraform
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//-/}"
          container_version:
            description: Container version
            type: string
            default: ${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
        steps:
          - checkout
          - run:
              name: Lint Shared Terraform
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                cd terraform_shared
                terraform init
                terraform validate
          - run:
              name: Lint Environment Terraform
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                cd terraform_environment
                terraform init
                terraform validate -var container_version=$CIRCLE_BRANCH-$SHORT_HASH

      docker_build_viewer_app:
        #
        # Build Docker container for Viewer App
        #   and runs the Unit Tests.
        #
        executor: python
        parameters:
          container_repo_url:
            type: string
            default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/use_an_lpa/viewer_front
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - run:
              name: Build
              command: |
                docker-compose build viewer-app
          - run:
              name: Run unit tests
              command: |
                docker run -d --name my-app << parameters.container_repo_url >>:latest
                docker exec my-app /app/vendor/bin/phpunit
          - ecr_login
          - run:
              name: Deploy
              command: |
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV

                # Viewer App
                docker tag << parameters.container_repo_url >>:latest << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
                if [ "${CIRCLE_BRANCH}" == "master" ]; then 
                  docker push << parameters.container_repo_url >>
                else
                  docker push << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
                fi

      docker_build_viewer_web:
        #
        # Build Docker container for Viewer Web
        #
        executor: python
        parameters:
          container_repo_url:
            type: string
            default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/use_an_lpa/web
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - run:
              name: Build
              command: |
                docker-compose build viewer-web
          - ecr_login
          - run:
              name: Deploy
              command: |
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV

                # Viewer Web
                docker tag << parameters.container_repo_url >>:latest << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  docker push << parameters.container_repo_url >>
                else
                  docker push << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
                fi

      apply_shared_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the shared infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: development
        environment:
          TF_WORKSPACE: "<<parameters.workspace>>"
        steps:
          - checkout
          - run:
              name: Apply Shared Terraform
              command: |
                cd terraform_shared
                terraform init
                terraform apply --auto-approve
      apply_environment_terraform:
        #
        # Apply the environment terraform configuration. This:
        #   - Updates per environment infrastructure; and
        #   - Triggers a deploy of the updated container (if changed)
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//-/}"
        steps:
          - checkout
          - run:
              name: Apply Environment Terraform
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                cd terraform_environment
                terraform init
                terraform apply --auto-approve -var container_version=$CIRCLE_BRANCH-$SHORT_HASH
                if [ "${CIRCLE_BRANCH}" != "master" ]; then
                  echo "Your environment, ${ENV_NAME:0:13} is built."
                  echo "To destroy this environment"
                  echo
                  echo "cd terraform_environment"
                  echo "aws-vault exec identity -- terraform init"
                  echo "aws-vault exec identity -- terraform workspace select ${ENV_NAME:0:13}"
                  echo "aws-vault exec identity -- terraform destroy"
                fi

      destroy_dev_environment:
        #
        # Destroys a development environment after testing and approval
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//-/}"
        steps:
          - checkout
          - run:
              name: Destroy Development Environment
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                if [ "${CIRCLE_BRANCH}" != "master" ]; then
                  cd terraform_environment
                  terraform init
                  terraform destroy -auto-approve
                fi

      run_behave_suite:
        #
        # Run the full set of functional tests
        #
        executor: python-browsers
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH//-/}"
        steps:
          - checkout
          - install_webdriver
          - run:
              name: install behave
              command: sudo pip3 install behave selenium --upgrade
          - run:
              name: run suite
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
                echo $SHORT_HASH
                behave
