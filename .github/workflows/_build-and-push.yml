name: "[Docker] Build and Push Images"

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Name of the branch doing the build"
        required: true
        type: string
      tag:
        description: "Tag for docker image"
        required: false
        default: 'latest'
        type: string
      push_to_ecr:
        description: "Whether to push to ECR"
        required: false
        default: 'true'
        type: string
      specific_path:
        description: "Build on a specific path"
        required: false
        default: 'all'
        type: string
    outputs:
      matrix_job_names:
        value: ${{ jobs.docker_build_scan_push.outputs.matrix_job_names }}

jobs:
  docker_build_scan_push:
    runs-on: ubuntu-latest
    outputs:
      matrix_job_names: ${{ steps.output_names.outputs.MATRIX_JOB_NAMES }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - svc_prefix: 'front'
            svc_suffix: 'app'
            build_development_docker: 'true'
            run_unit_tests: 'true'
            run_integration_tests: 'true'
            artifact_to_dl: 'dist-web'
            path_to_docker_file: 'service-front/docker/app/Dockerfile'
          - svc_prefix: 'front'
            svc_suffix: 'web'
            build_development_docker: 'false'
            run_unit_tests: 'false'
            run_integration_tests: 'false'
            artifact_to_dl: 'dist-web'
            path_to_docker_file: 'service-front/docker/web/Dockerfile'
          - svc_prefix: 'api'
            svc_suffix: 'app'
            build_development_docker: 'true'
            run_unit_tests: 'true'
            run_integration_tests: 'true'
            artifact_to_dl: ''
            path_to_docker_file: 'service-api/docker/app/Dockerfile'
          - svc_prefix: 'api'
            svc_suffix: 'web'
            build_development_docker: 'false'
            run_unit_tests: 'false'
            run_integration_tests: 'false'
            artifact_to_dl: ''
            path_to_docker_file: 'service-api/docker/web/Dockerfile'
          - svc_prefix: 'admin'
            svc_suffix: 'app'
            build_development_docker: 'false'
            run_unit_tests: 'true'
            run_integration_tests: 'false'
            artifact_to_dl: ''
            path_to_docker_file: 'service-admin/Dockerfile'
          - svc_prefix: 'stats_upload'
            svc_suffix: 'lambda'
            build_development_docker: 'false'
            run_unit_tests: 'true'
            run_integration_tests: 'false'
            artifact_to_dl: ''
            path_to_docker_file: 'lambda-functions/upload-statistics/Dockerfile'
          - svc_prefix: 'event'
            svc_suffix: 'receiver'
            build_development_docker: 'false'
            run_unit_tests: 'true'
            run_integration_tests: 'false'
            artifact_to_dl: ''
            path_to_docker_file: 'lambda-functions/event-receiver/Dockerfile'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        id: hadolint
        with:
          dockerfile: ${{ matrix.path_to_docker_file }}
          no-fail: true
          failure-threshold: warning

      - name: cache node modules
        id: cache-npm
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        env:
          cache-name: cache-node-modules
        with:
          path: ./service-front/web/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**service-front/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        if: |
          matrix.svc_prefix == 'front' &&
          inputs.specific_path == 'all'

      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7
        if: |
          inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/opg-use-an-lpa-ci
          role-duration-seconds: 1800
          role-session-name: OPGUseAnLPAECRGithubAction
        if: |
          inputs.push_to_ecr == 'true' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: ecr login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: 311462405659
        if: |
          inputs.push_to_ecr == 'true' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: download artifact
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: ${{ matrix.artifact_to_dl }}
          path: service-${{ matrix.svc_prefix }}/web/dist
        if: |
          matrix.artifact_to_dl != '' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: docker build development target
        env:
          SVC_PREFIX: ${{ matrix.svc_prefix }}
        run: |
          if [ ${SVC_PREFIX} == "front" ]; then
            mkdir -p service-${SVC_PREFIX}/app/assets/stylesheets
            cp -R ./service-${SVC_PREFIX}/web/dist/stylesheets/pdf.css service-${SVC_PREFIX}/app/assets/stylesheets/pdf.css
          fi
          docker build --target development --file service-${SVC_PREFIX}/docker/app/Dockerfile --tag ${SVC_PREFIX}-app:latest .
        if: |
          matrix.build_development_docker == 'true' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: install python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: docker unit tests
        env:
          SVC_PREFIX: ${{ matrix.svc_prefix }}
        run: |
          if [ ${SVC_PREFIX} == 'admin' ]; then
            mkdir -p build/service-${SVC_PREFIX}
            cd service-${SVC_PREFIX}/
            go test -race -coverpkg ./... -coverprofile=../build/service-${SVC_PREFIX}/coverage.out -covermode=atomic ./...
          elif [ ${SVC_PREFIX} == 'stats_upload' ]; then
            mkdir -p build/service-${SVC_PREFIX}
            cd lambda-functions/upload-statistics/app
            pip install -r ../requirements-tests.txt
            python -m unittest -v
          elif [ ${SVC_PREFIX} == 'event' ]; then
            mkdir -p build/service-${SVC_PREFIX}
            cd lambda-functions/${SVC_PREFIX}-receiver/app
            go mod tidy
            go test
          else
            docker run -d --name tests ${SVC_PREFIX}-app:latest
            docker exec tests /usr/bin/composer install --prefer-dist --no-interaction --no-scripts --optimize-autoloader
            docker exec tests docker-php-ext-enable xdebug
            docker exec tests php -dxdebug.mode=coverage /app/vendor/bin/phpunit --testsuite unit
          fi
        if: |
          matrix.run_unit_tests == 'true' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: docker integration and acceptance tests
        env:
          SVC_PREFIX: ${{ matrix.svc_prefix }}
        run: |
          if [[ "${SVC_PREFIX}" = "api" ]]; then
            docker run -d --rm --name lpa-codes-pact-mock pactfoundation/pact-cli:latest mock-service -p "80" --host "0.0.0.0" \
              --pact-dir /tmp/pacts --consumer use_a_lasting_power_of_attorney --provider lpa-codes
            docker run -d --rm --name api-gateway-pact-mock pactfoundation/pact-cli:latest mock-service -p "80" --host "0.0.0.0" \
              --pact-dir /tmp/pacts --consumer use_a_lasting_power_of_attorney --provider api-gateway
            docker run -d --rm --name iap-images-mock pactfoundation/pact-cli:latest mock-service -p "80" --host "0.0.0.0" \
              --pact-dir /tmp/pacts --consumer use_a_lasting_power_of_attorney --provider iap-api-gateway

            export DOCKER_REMOTE_LPA_PACT_IP="$(docker inspect --format='{{.NetworkSettings.IPAddress}}' lpa-codes-pact-mock)"
            export DOCKER_REMOTE_API_PACT_IP="$(docker inspect --format='{{.NetworkSettings.IPAddress}}' api-gateway-pact-mock)"
            export DOCKER_REMOTE_IAP_PACT_IP="$(docker inspect --format='{{.NetworkSettings.IPAddress}}' iap-images-mock)"

            docker run -d --name behattests \
              --add-host lpa-codes-pact-mock:$DOCKER_REMOTE_LPA_PACT_IP \
              --add-host api-gateway-pact-mock:$DOCKER_REMOTE_API_PACT_IP \
              --add-host iap-images-mock:$DOCKER_REMOTE_IAP_PACT_IP api-app:latest

            docker exec behattests /usr/bin/composer install --prefer-dist --no-interaction --no-scripts --optimize-autoloader
            docker exec behattests /app/vendor/bin/behat -p integration -f progress -o std -f junit -o /app/build/reports/int
            docker exec behattests /usr/local/bin/php -dapc.enable_cli=1 /app/vendor/bin/behat -p acceptance -f progress -o std -f junit -o /app/build/reports/acc

            docker stop lpa-codes-pact-mock
            docker stop api-gateway-pact-mock
            docker stop iap-images-mock
          elif [[ "${SVC_PREFIX}" = "front" ]]; then
            docker run -d --name behattests front-app:latest

            docker exec behattests /usr/bin/composer install --prefer-dist --no-interaction --no-scripts --optimize-autoloader
            docker exec behattests /app/vendor/bin/behat -p integration -f progress -o std -f junit -o /app/build/reports/int
            docker exec behattests /usr/local/bin/php -dapc.enable_cli=1 -d memory_limit=-1 /app/vendor/bin/behat -p acceptance -f progress -o std -f junit -o /app/build/reports/acc
          fi
        if: |
          matrix.run_integration_tests == 'true' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: fetch test results
        env:
          SVC_PREFIX: ${{ matrix.svc_prefix }}
        run: |
          mkdir -p build/service-${SVC_PREFIX}
          docker cp tests:/app/build/reports build/service-${SVC_PREFIX}/phpunit
          docker cp behattests:/app/build/reports build/service-${SVC_PREFIX}/behat
        if: |
          (success() || failure()) && contains(fromJson('["front", "api"]'), matrix.svc_prefix) &&
          matrix.svc_suffix == 'app' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: archive test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: service-${{ matrix.svc_prefix }}
          path: build/service-${{ matrix.svc_prefix }}
        if: |
          (success() || failure()) && contains(fromJson('["front", "api", "admin", "event"]'), matrix.svc_prefix) &&
          matrix.svc_suffix == 'app' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: build image for production
        env:
          SVC_PREFIX: ${{ matrix.svc_prefix }}
          SVC_SUFFIX: ${{ matrix.svc_suffix }}
        run: |
          if [[ "${SVC_SUFFIX}" = "app" ]]; then
            if [[ "${SVC_PREFIX}" = "front" ]]; then
              mkdir -p service-front/app/assets/stylesheets
              cp -R ./service-front/web/dist/stylesheets/pdf.css service-front/app/assets/stylesheets/pdf.css
            fi

            if [[ "${SVC_PREFIX}" = "admin" ]]; then
              docker build --target production --file service-${SVC_PREFIX}/Dockerfile --tag ${SVC_PREFIX}_app:latest service-${SVC_PREFIX}/
            else
              docker build --target production --file service-${SVC_PREFIX}/docker/app/Dockerfile --tag ${SVC_PREFIX}_app:latest .
            fi

          elif [[ "${SVC_SUFFIX}" = "web" ]]; then
            if [[ "${SVC_PREFIX}" = "front" ]]; then
              cp -R ./service-front/web/dist/* service-front/docker/web/web/
            fi

            docker build --file service-${SVC_PREFIX}/docker/web/Dockerfile --tag ${SVC_PREFIX}_web:latest .

          elif [[ "${SVC_PREFIX}" = "stats_upload" ]]; then
            docker build --no-cache --file lambda-functions/upload-statistics/Dockerfile --tag stats_upload_lambda:latest lambda-functions/upload-statistics
          elif [[ "${SVC_PREFIX}" = "event" ]]; then
            if [[ "${SVC_SUFFIX}" = "receiver" ]]; then
              docker build --file lambda-functions/${SVC_PREFIX}-${SVC_SUFFIX}/Dockerfile --tag ${SVC_PREFIX}_${SVC_SUFFIX}:latest lambda-functions/${SVC_PREFIX}-${SVC_SUFFIX}
            fi
          fi
        if: (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: Trivy Image Vulnerability Scanner
        id: trivy_scan
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb # 0.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRIVY_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{ matrix.svc_prefix }}_${{ matrix.svc_suffix }}:latest
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
          skip-dirs: /app/vendor
        if: (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: Upload Trivy scan results to GitHub Security tab
        id: trivy_upload_sarif
        uses: github/codeql-action/upload-sarif@6bb031afdd8eb862ea3fc1848194185e076637e5 # v3.28.11
        if: |
          (steps.trivy_scan.outcome == 'success' || steps.trivy_scan.outcome == 'failure') &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)
        with:
          sarif_file: 'trivy-results.sarif'

      - name: tag and push container
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REGISTRY_ALIAS: use_an_lpa
          IMAGE_TAG: ${{ inputs.tag }}
          IMAGE_NAME: ${{ matrix.svc_prefix }}_${{ matrix.svc_suffix }}
          BRANCH_NAME: ${{ inputs.branch_name }}
        run: |
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:$IMAGE_TAG
          if [[ "${BRANCH_NAME}" == "main" ]]; then
            docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME:latest
          fi
          docker push --all-tags $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$IMAGE_NAME
        if: |
          inputs.push_to_ecr == 'true' &&
          (inputs.specific_path == 'all' || inputs.specific_path == matrix.svc_prefix)

      - name: Output matrix job name
        id: output_names
        run: |
          touch matrix_job_names.txt
          JOB_NAME="${{ matrix.svc_prefix }},${{ matrix.svc_suffix }},${{ matrix.build_development_docker }},${{ matrix.run_unit_tests }},${{ matrix.run_integration_tests }},${{ matrix.artifact_to_dl }}"
