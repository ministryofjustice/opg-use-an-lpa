on:
  workflow_call:
    inputs:
      terraform_path:
        description: 'The name of the terraform path'
        required: true
        type: string
      workspace:
        description: 'Terraform workspace'
        required: true
        type: string
      container_version:
        description: 'Image tag to use'
        required: false
        type: string
        default: ''
      apply:
        description: 'Whether to apply terraform'
        required: false
        type: string
        default: 'false'
      specific_path:
        description: "Build on a specific path"
        required: false
        default: 'all'
        type: string
      add_ttl:
        description: "Build on a specific path"
        required: false
        default: 'false'
        type: string
      extra_vars:
        description: "Extra vars to pass to terraform (-var foo=bar)"
        required: false
        default: ''
        type: string

jobs:
  terraform_workflow:
    runs-on: ubuntu-latest
    steps:
      - name: export versions to use
        id: version-output
        env:
          TAG: ${{ inputs.container_version }}
          SPECIFIC_PATH: ${{ inputs.specific_path }}
        run: |
          if [[ ${SPECIFIC_PATH} == "terraform" ]]
          then
            echo "tag=$(echo latest)" >> $GITHUB_OUTPUT
            echo "admin-tag=$(echo latest)" >> $GITHUB_OUTPUT
          elif [[ ${SPECIFIC_PATH} == "admin" ]]
          then
            echo "tag=$(echo latest)" >> $GITHUB_OUTPUT
            echo "admin-tag=$(echo ${TAG})" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo ${TAG})" >> $GITHUB_OUTPUT
            echo "admin-tag=$(echo ${TAG})" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: '0'

      - name: "Set terraform version"
        id: set-terraform-version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@ea1e81f43e7593acd74cc114085930f5f54914a2 # v3.1.7
        with:
          terraform_directory: ./terraform/${{ inputs.terraform_path }}

      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.version }}

      - name: configure AWS credentials for getting pagerduty token
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          role-to-assume: arn:aws:iam::367815980639:role/opg-use-an-lpa-ci
          aws-region: eu-west-1
          role-duration-seconds: 1800
          role-session-name: OPGUseAnLPADevAssumeGithubAction

      - name: set pagerduty token
        run: |
          export TF_VAR_pagerduty_token=$(aws secretsmanager get-secret-value --secret-id \
            pagerduty_api_key --region eu-west-1 | jq -r '.SecretString' 2>/dev/null)
          echo "::add-mask::$TF_VAR_pagerduty_token"
          echo TF_VAR_pagerduty_token=$TF_VAR_pagerduty_token >> $GITHUB_ENV

      - name: configure AWS credentials for terraform
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-duration-seconds: 1800
          role-session-name: OPGUseAnLPATerraformGithubAction

      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.USE_AN_LPA_DEPLOY_KEY_PRIVATE_KEY }}

      - name: output terraform variables
        env:
          TF_PATH: ${{ inputs.terraform_path }}
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VERSION: ${{ steps.set-terraform-version.outputs.version }}
          TAG: ${{ steps.version-output.outputs.tag }}
          ADMIN_TAG: ${{ steps.version-output.outputs.admin-tag }}
        run: |
          echo "Path: ${TF_PATH}"
          echo "Workspace: ${TF_WORKSPACE}"
          echo "Image tag: ${TAG}"
          echo "Admin image tag: ${ADMIN_TAG}"
          echo "TF_VERSION: ${TF_VERSION}"
        working-directory: terraform/${{ inputs.terraform_path }}
        continue-on-error: true

      - name: terraform init
        run: terraform init -input=false
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: terraform plan ${{ inputs.terraform_path }}
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_container_version: ${{ steps.version-output.outputs.tag }}
          TF_VAR_admin_container_version: ${{ steps.version-output.outputs.admin-tag }}
        run: |
          terraform workspace show
          terraform plan -input=false -parallelism=30 -lock-timeout=5m ${{ inputs.extra_vars }}
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: terraform version info
        run: terraform version

      - name: add TTL to dynamodb for environment
        if: inputs.apply == 'true' && inputs.add_ttl == 'true'
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
        run: scripts/pipeline/workspace_cleanup/put_workspace_linux -workspace=${TF_WORKSPACE}

      - name: terraform apply ${{ inputs.terraform_path }}
        if: inputs.apply == 'true'
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_container_version: ${{ steps.version-output.outputs.tag }}
          TF_VAR_admin_container_version: ${{ steps.version-output.outputs.admin-tag }}
          CI: true
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30 ${{ inputs.extra_vars }}
        working-directory: terraform/${{ inputs.terraform_path }}

      - name: upload environment cluster config file
        if: inputs.terraform_path == 'environment'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: environment_config_file_${{ inputs.workspace }}
          path: terraform/environment/cluster_config.json
