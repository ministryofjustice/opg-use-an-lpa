// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DynamodbClient is an autogenerated mock type for the DynamodbClient type
type DynamodbClient struct {
	mock.Mock
}

// GetByLpaIDAndUserID provides a mock function with given fields: ctx, lpaId, userId, v
func (_m *DynamodbClient) GetByLpaIDAndUserID(ctx context.Context, lpaId string, userId string, v interface{}) error {
	ret := _m.Called(ctx, lpaId, userId, v)

	if len(ret) == 0 {
		panic("no return value specified for GetByLpaIDAndUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, lpaId, userId, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OneByUID provides a mock function with given fields: ctx, uid, v
func (_m *DynamodbClient) OneByUID(ctx context.Context, uid string, v interface{}) error {
	ret := _m.Called(ctx, uid, v)

	if len(ret) == 0 {
		panic("no return value specified for OneByUID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, uid, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, v
func (_m *DynamodbClient) Put(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDynamodbClient creates a new instance of DynamodbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDynamodbClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DynamodbClient {
	mock := &DynamodbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
