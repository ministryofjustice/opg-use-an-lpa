// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// DynamoClient provides a mock function with no fields
func (_m *Factory) DynamoClient() DynamodbClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DynamoClient")
	}

	var r0 DynamodbClient
	if rf, ok := ret.Get(0).(func() DynamodbClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DynamodbClient)
		}
	}

	return r0
}

// Now provides a mock function with no fields
func (_m *Factory) Now() func() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 func() time.Time
	if rf, ok := ret.Get(0).(func() func() time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() time.Time)
		}
	}

	return r0
}

// UuidString provides a mock function with no fields
func (_m *Factory) UuidString() func() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UuidString")
	}

	var r0 func() string
	if rf, ok := ret.Get(0).(func() func() string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() string)
		}
	}

	return r0
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
