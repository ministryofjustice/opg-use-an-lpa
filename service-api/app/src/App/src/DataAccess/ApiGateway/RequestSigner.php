<?php

declare(strict_types=1);

namespace App\DataAccess\ApiGateway;

use Aws\Credentials\CredentialProvider;
use Aws\Signature\SignatureV4;
use Closure;
use Psr\Http\Message\RequestInterface;

class RequestSigner
{
    private readonly array $headers;
    private readonly Closure $credentials;

    public function __construct(readonly private SignatureV4 $signer, array $headers = [])
    {
        $this->headers     = array_filter($headers);
        $this->credentials = Closure::fromCallable(CredentialProvider::defaultProvider());
    }

    public function sign(RequestInterface $request): RequestInterface
    {
        foreach ($this->headers as $header => $value) {
            $request = $request->withHeader($header, $value);
        }

        $request = $this->signer->signRequest($request, ($this->credentials)()->wait());

        // if the Authorization header has been supplied then it is with the understanding
        // that it replaces anything generated by the AWS signing process.
        if (array_key_exists('Authorization', $this->headers)) {
            $request = $request->withHeader('Authorization', $this->headers['Authorization']);
        }

        return $request;
    }
}
