<?php

declare(strict_types=1);

namespace Common\Service\OneLogin;

use Common\Exception\ApiException;
use Common\Service\ApiClient\Client as ApiClient;
use Common\Service\Authentication\LogoutStrategy;
use Facile\OpenIDClient\Session\AuthSessionInterface;
use Mezzio\Authentication\UserInterface;
use Psr\Log\LoggerInterface;

class OneLoginService implements LogoutStrategy
{
    public const OIDC_AUTH_INTERFACE = 'oidcauthinterface';

    /**
     * @var callable
     */
    private $userModelFactory;

    public function __construct(
        private ApiClient $apiClient,
        callable $userModelFactory,
        private LoggerInterface $logger,
    ) {
        // makes the passed in callable model factory typesafe
        $this->userModelFactory = function (
            string $identity,
            array $roles = [],
            array $details = [],
        ) use ($userModelFactory): UserInterface {
            return $userModelFactory($identity, $roles, $details);
        };
    }

    /**
     * @param string $uiLocale One of either 'en' or 'cy'
     * @param string $redirectUrl The url of the callback endpoint
     * @return array{
     *     state: string,
     *     nonce: string,
     *     url: string,
     * }
     * @throws ApiException
     */
    public function authenticate(string $uiLocale, string $redirectUrl): array
    {
        return $this->apiClient->httpGet(
            '/v1/auth/start',
            [
                'ui_locale'    => $uiLocale,
                'redirect_url' => $redirectUrl,
            ]
        );
    }

    /**
     * @param string               $code The code generated by the OIDC provider
     * @param string               $state The state value returned by the OIDC provider
     * @param AuthSessionInterface $authCredentials Our generated session values and options
     * @return UserInterface
     * @throws ApiException
     */
    public function callback(string $code, string $state, AuthSessionInterface $authCredentials): UserInterface
    {
        $userData = $this->apiClient->httpPost('/v1/auth/callback', [
            'code'         => $code,
            'state'        => $state,
            'auth_session' => $authCredentials,
        ]);

        $this->logger->info(
            'Authentication successful for account with Id {id}',
            [
                'id'         => $userData['user']['Id'],
                'last-login' => $userData['user']['LastLogin'] ?? 'never',
            ]
        );

        $filteredDetails = [
            'Email'   => $userData['user']['Email'],
            'Subject' => $userData['user']['Identity'],
            'IdToken' => $userData['token'],
        ];

        if (array_key_exists('LastLogin', $userData['user'])) {
            $filteredDetails['LastLogin'] = $userData['user']['LastLogin'];
        }

        return ($this->userModelFactory)(
            $userData['user']['Id'],
            [],
            $filteredDetails
        );
    }

    public function logout(UserInterface $user): ?string
    {
        $logoutData = $this->apiClient->httpPut(
            '/v1/auth/logout',
            [
                'user' => $user,
            ]
        );

//        $logoutData = [
//            'redirect_uri' => 'http://localhost:4013/logout?id_token_hint=token&post_logout_redirect_uri=https://www.gov.uk/done/use-lasting-power-of-attorney',
//        ];

        return $logoutData['redirect_uri'];
    }
}
